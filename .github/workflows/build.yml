name: Build Binaries

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  test:
    uses: ./.github/workflows/test.yaml

  protobuf:
    permissions:
      contents: write
    uses: ./.github/workflows/protobuffers.yml

  verify:
    needs: [test, protobuf]
    runs-on: ubuntu-latest
    steps:
      - run: echo "All verifications passed successfully!"

  build-and-release:
    needs: verify
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      BIN_OUTPUT: ./bin

      CLI_PKG: ./cmd/cli
      CLI_BIN_NAME: mbus-cli

      SERVER_PKG: ./cmd/server
      SERVER_BIN_NAME: mbus-server

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for tags

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"

      - name: Build binaries
        run: |
          mkdir -p ${{ env.BIN_OUTPUT }}
          GOOS=linux GOARCH=amd64 go build -o ${{ env.BIN_OUTPUT }}/${{ env.CLI_BIN_NAME }}-linux-amd64 ${{ env.CLI_PKG }}
          GOOS=darwin GOARCH=amd64 go build -o ${{ env.BIN_OUTPUT }}/${{ env.CLI_BIN_NAME }}-darwin-amd64 ${{ env.CLI_PKG }}
          GOOS=windows GOARCH=amd64 go build -o ${{ env.BIN_OUTPUT }}/${{ env.CLI_BIN_NAME }}-windows-amd64.exe ${{ env.CLI_PKG }}

          GOOS=linux GOARCH=amd64 go build -o ${{ env.BIN_OUTPUT }}/${{ env.SERVER_BIN_NAME }}-linux-amd64 ${{ env.SERVER_PKG }}
          GOOS=darwin GOARCH=amd64 go build -o ${{ env.BIN_OUTPUT }}/${{ env.SERVER_BIN_NAME }}-darwin-amd64 ${{ env.SERVER_PKG }}
          GOOS=windows GOARCH=amd64 go build -o ${{ env.BIN_OUTPUT }}/${{ env.SERVER_BIN_NAME }}-windows-amd64.exe ${{ env.SERVER_PKG }}

      - name: Create versioned release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ${{ env.BIN_OUTPUT }}/*

      - name: Tag latest
        run: |
          git tag -f latest
          git push -f origin latest

      - name: Create/Update latest release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Latest Release
          tag: latest
          allowUpdates: true
          prerelease: false
          replacesArtifacts: true
          artifacts: "${{ env.BIN_OUTPUT }}/*"
