// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: messagebus/v1/messagebus.proto

package messagebusv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageBusService_Publish_FullMethodName   = "/messagebus.v1.MessageBusService/Publish"
	MessageBusService_Subscribe_FullMethodName = "/messagebus.v1.MessageBusService/Subscribe"
)

// MessageBusServiceClient is the client API for MessageBusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBusServiceClient interface {
	// Publish a message to the specified topic
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// Subscribe to a topic (streaming)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error)
}

type messageBusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBusServiceClient(cc grpc.ClientConnInterface) MessageBusServiceClient {
	return &messageBusServiceClient{cc}
}

func (c *messageBusServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, MessageBusService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBusServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageBusService_ServiceDesc.Streams[0], MessageBusService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageBusService_SubscribeClient = grpc.ServerStreamingClient[SubscribeResponse]

// MessageBusServiceServer is the server API for MessageBusService service.
// All implementations should embed UnimplementedMessageBusServiceServer
// for forward compatibility.
type MessageBusServiceServer interface {
	// Publish a message to the specified topic
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	// Subscribe to a topic (streaming)
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error
}

// UnimplementedMessageBusServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageBusServiceServer struct{}

func (UnimplementedMessageBusServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMessageBusServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMessageBusServiceServer) testEmbeddedByValue() {}

// UnsafeMessageBusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBusServiceServer will
// result in compilation errors.
type UnsafeMessageBusServiceServer interface {
	mustEmbedUnimplementedMessageBusServiceServer()
}

func RegisterMessageBusServiceServer(s grpc.ServiceRegistrar, srv MessageBusServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageBusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageBusService_ServiceDesc, srv)
}

func _MessageBusService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBusServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBusService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBusServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBusService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageBusServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageBusService_SubscribeServer = grpc.ServerStreamingServer[SubscribeResponse]

// MessageBusService_ServiceDesc is the grpc.ServiceDesc for MessageBusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messagebus.v1.MessageBusService",
	HandlerType: (*MessageBusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _MessageBusService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MessageBusService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messagebus/v1/messagebus.proto",
}
